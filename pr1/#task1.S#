/*
 * Вычисление количества позиций символов для 
 * символьного представления неотрицательного 
 * 32-битового целого числа

 * Пограмма содержательно эквивалентна программе task1.c
 
 * Ассемблирование:  as -ahlsm=task1.lst --32 -gstabs+ -o task1.o task1.S
 *	
 * -ahlsm ключи полного листинга
 * task1.lst - имя ТЕКСТОВОГО файла листинга, описывающего 
 * результат ассемблирования

 * --32 - генерировать 32 разрядные машинные команды 

 * -gstabs+ - ключи генерации отладочной информации для отладчика

 * -o task1.o - задание имени выходного ( для команды as - 
 * объектного) файла

 * -o ключ определения имени выходного ( для команды as - 
 * объектного) файла

 * task1.S -  исходный -  входной файл (этот файл)
 *
 * Редактирование связей: ld -melf_i386 -o task1-exe-S task1.o

 * МОЖНО НЕ ЧИТАТЬ! В нашем курсе используется только 
 *	            -melf_i386 
 *  -m<эмуляция ld> ld может генерировать машинный код 
 *     исполняемого файла для нескольких архитектур.
 *     Говорят, что ld "эмулирует" архитектуру.	 
 *  Поддерживаемые архитектуры - "эмуляции":
   
*	elf_x86_64
*	elf_i386
*	i386linux
*	elf_l1om

 * -o task1-exe-S - задание имени выходного  
 * (для команды ld -  исполняемого) файла 

 * -o ключ определения имени выходного  
 * (для команды ld -  исполняемого) файла

 * task1.o - объектный файл (входной для редактора связей ld)

 * Запуск отладчика: kdbg task1-exe-S 
 *
*/
 
.include "my-macro" 

    
.data 	
n: 	.long 2345     
length: .long 0        
ten: 	.long 10       
                        

.text 

.global _start 	

_start: 	
	nop           



        movl $0, %ebx  
	movl n, %eax      
                       
nextdigit:
        movl  $0, %edx         

        idivl ten     
                    
        
        incl %ebx     

        cmpl $0, %eax  
        jg   nextdigit  





        movl %ebx, length 

	Finish          )
        
.end  
